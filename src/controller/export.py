
import os
import shutil
import logging
from datetime import datetime
import tkinter.filedialog as filedialog
from pathlib import Path

logger = logging.getLogger("app_logger")


# TODO integrate and test

class Export:
    app = None

    def __init__(self,
                 name: str,
                 ext: str,
                 write_to_file=None,
                 write_to_path=None,
                 copy_from_path: str = None,
                 use_dialog: bool = True):
        """
        Initializes an export of some object/data/visualization generated by the app.
        After instantiating the Export object, call the method execute()
        :param name: The name of the export function
        :param ext: The file extension
        :param write_to_file: A function callable on a file handle to execute the export
        :param write_to_path: A function callable on a path string to execute the export
        :param copy_from_path: Pass a path string here to copy a file to be found there
        :param use_dialog: Whether to open a dialog with path / filename selection. If False, use default filename.
        """
        self.name = name
        self.ext = ext
        self.write_to_file = write_to_file
        self.write_to_path = write_to_path
        self.copy_from_path = copy_from_path
        self.use_dialog = use_dialog

        self.path = None
        self.cancelled = False

    def prepare_path(self):
        self.cancelled = False
        # get default location and filename
        directory = Path(Export.app.get_preference("export_path"))
        filename = f"export-{datetime.now().strftime('%Y%m%d-%H%M%S')}-{self.name}.{self.ext}"

        if self.use_dialog:
            path = filedialog.asksaveasfilename(initialdir=str(directory), initialfile=filename)
            if path is None or not path:
                self.cancelled = True
            else:
                self.path = Path(path)
                directory = self.path.resolve().parent
                Export.app.set_preference("export_path", str(directory))
        else:
            self.path = directory / filename

    def execute(self):
        success = False
        if not self.cancelled and self.path is not None:
            if self.write_to_file:
                with open(self.path, mode="w", encoding="utf-8") as f:
                    self.write_to_file(f)
                success = True
            elif self.write_to_path:
                self.write_to_path(self.path)
                success = True
            elif self.copy_from_path:
                if os.path.exists(self.copy_from_path):
                    shutil.copy2(self.copy_from_path, self.path)
                    success = True
        if success:
            logger.info(f"Export '{self.name}' finished. (File: {self.path})")
            return True
        logger.info(f"Export '{self.name}' was not executed.")
        return False
