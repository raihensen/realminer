
import os
import logging
from datetime import datetime
import tkinter.filedialog as filedialog
from pathlib import Path

from main import App

logger = logging.getLogger("app_logger")


# TODO integrate and test

class Export:
    def __init__(self,
                 app: App,
                 name: str,
                 ext: str,
                 write_to_file=None,
                 write_to_path=None,
                 use_dialog: bool = True):
        """
        Initializes an export of some object/data/visualization generated by the app.
        After instantiating the Export object, call the method execute()
        :param app: The App object
        :param name: The name of the export function
        :param ext: The file extension
        :param write_to_file: A function callable on a file handle to execute the export
        :param write_to_path: A function callable on a path to execute the export
        :param use_dialog: Whether to open a dialog with path / filename selection. If False, use default filename.
        """
        self.cancelled = False
        self.write_to_file = write_to_file
        self.write_to_path = write_to_path
        self.name = name

        # get default location
        directory = Path(app.get_preference("export_path", os.path.expanduser("~")))

        # generate default filename
        filename = f"export-{datetime.strftime('%Y%m%d-%H%M%S')}-{name}.{ext}"

        if use_dialog:
            self.path = filedialog.asksaveasfilename(initialdir=directory, initialfile=filename)
            if self.path is None:
                self.cancelled = True
        else:
            self.path = directory / filename

    def execute(self):
        if not self.cancelled and self.path is not None:

            if self.write_to_file:
                with open(self.path, mode="w", encoding="utf-8") as f:
                    self.write_to_file(f)
                return True
            elif self.write_to_path:
                self.write_to_path(self.path)
                return True

        logger.info(f"Export '{self.name}' was not executed.")
        return False
