

ocpa issues

windows_events.jsonocel
C:\Users\RH\anaconda3\envs\pads-x-celonis-ocpm\Lib\site-packages\ocpa\objects\log\converter\versions\jsonocel_to_csv.py
event has no objects of a certain type: results in np.nan which is tried to iterate
Line 23:

new_omap = {}
        for obj in events[ev].omap:
            typ = obj_type[obj]
            if not typ in new_omap:
                new_omap[typ] = set()
            new_omap[typ].add(obj)

->

new_omap = {ot: set() for ot in ocel.meta.obj_types}
for obj in events[ev].omap:
    new_omap[obj_type[obj]].add(obj)


o2c.jsonocel
C:\Users\RH\anaconda3\envs\pads-x-celonis-ocpm\Lib\site-packages\ocpa\objects\log\variants\table.py
Try to convert event id to int. Might be non-number
Fix by converting all event ids to range when importing
In C:\Users\RH\anaconda3\envs\pads-x-celonis-ocpm\Lib\site-packages\ocpa\objects\log\importer\ocel\versions\import_ocel_json.py
Line 94:

    # CHANGED
    # for item in data.items():
    #     events[item[0]] = Event(id=item[0],
    # (replaced item[0] by id in the following)
    for id, item in enumerate(data.items()):
        events[id] = Event(id=id,
                                act=item[1][act_name],
                                omap=item[1][omap_name],
                                vmap=item[1][vmap_name],
                                time=datetime.fromisoformat(item[1][time_name]))
        if "start_timestamp" not in item[1][vmap_name]:
            events[id].vmap["start_timestamp"] = datetime.fromisoformat(
                item[1][time_name])
        else:
            events[id].vmap["start_timestamp"] = datetime.fromisoformat(
                events[id].vmap["start_timestamp"])
    sorted_events = sorted(events.items(), key=lambda kv: kv[1].time)
    return OrderedDict(sorted_events)


recruiting.jsonocel
C:\Users\RH\anaconda3\envs\pads-x-celonis-ocpm\Lib\site-packages\ocpa\objects\log\importer\ocel\versions\import_ocel_json.py
Error when parsing timestamp with "Z" at the end (signifies UTC)
Line 87 - Insert following function:

# CHANGED
def parse_timestamp(t: str) -> datetime:
    if t.endswith("Z"):
        t = t[:-1]
    return datetime.fromisoformat(t)

+ Replace datetime.fromisoformat(x) by parse_timestamp(x)



